{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Monty Hall","provenance":[{"file_id":"1qYVqUANQIHZHVTjIyPcRWyqf2Xj6Z8V8","timestamp":1585666131323}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"s6odsFbLpgIh","colab_type":"text"},"source":["# Monty Hall\n","\n","**Below is an implementation of the Monty Hall game with Python. It contains no comments.**"]},{"cell_type":"markdown","metadata":{"id":"QAqgGziZPsIZ","colab_type":"text"},"source":["## Mission 1\n","\n","After reviewing the code below, add **unilinear** and **multilinear** comments to explain how it works to another developer."]},{"cell_type":"code","metadata":{"id":"0dL7B4XiO1ft","colab_type":"code","outputId":"beab73cb-049c-4265-95c8-10f9a543e5de","executionInfo":{"status":"ok","timestamp":1585757083535,"user_tz":-120,"elapsed":1105,"user":{"displayName":"Sébastien Vanstavel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5NfGIDvXc-vdIHXhbJ3ezTYoxOfaUGnMRSECx5w=s64","userId":"10084807894626874113"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["import matplotlib.pyplot as plt\n","\n","from random import randint\n","\n","\n","\n","CHANGE = \"change\"\n","KEEP = \"keep\"\n","\n","def playOneGame (strategy):\n","  \"\"\"\n","  Cette première fonction permet de définir ce qui se produit en fonction de \n","  la stratégie choisie par la joueur (changement de porte au second tour ou \n","  conservation de la porte choisie au départ)\n","  La fonction renvoie 1 si le joueur fini avec la bonne porte, sinon 0. \n","  \"\"\"\n","  doors = [0, 1, 2]                       # liste des portes disponibles en début de partie\n","  \n","  good_door = randint(0,2)                # sélection de la porte gagnante parmis les trois\n","  \n","  first_choice = randint(0,2)             # choix aléatoire d'une porte parmis les 3 (représente le choix du joueur)\n","  \n","  doors.remove(first_choice)              # on retire le choix du joueur des porte que l'on peut ouvrir\n","  if first_choice == good_door:\n","      doors.remove(doors [randint(0,1)])  # si porte choisie est la bonne, on ouvre une porte aléatoirement parmis les 2 qui reste\n","  else:\n","      doors = [good_door]                 # sinon on ouvre celle qui n'est pas la bonne\n","  \n","  second_choice = 0\n","                                          # choix du joueur: change de porte ou garde la même?\n","  if strategy.lower() == \"change\":\n","      second_choice = doors[0]            # change de porte pour prendre celle qu'il reste\n","  elif strategy.lower() == \"keep\":\n","      second_choice = first_choice        # garde la même porte\n","  else:                                   # affiche une erreur si tout autre choix\n","      raise ValueError(\"Strategy not recognized!\")\n","  \n","  return second_choice == good_door       # on renvoi True si le joueur à la bonne porte False sinon\n","\n","\n","def playManyGames(strategy, nb_turns):\n","  \"\"\"\n","  Cette fonction permet de définir une stratégie à adopter (change or keep) \n","  et de jouer au jeu le nombre de fois désirée (nb_turns).\n","  \n","  La fonction retourne 1 si la partie est gagnée (on a la bonne porte à la fin)\n","  et 0 si on a perdu.\n","  \"\"\"\n","  return [1 if playOneGame(strategy) else 0 for i in range(nb_turns)]\n","\n","\n","\"\"\"\n","Dessine le graphique représentant le nombre de gains sur 10k essais avec les \n","différentes statégies (change ou keep)\n","\"\"\"\n","plot = plt.bar([1,2], [sum(playManyGames(\"change\", 10000)), sum(playManyGames(\"keep\", 10000))], \n","               tick_label=[\"Change\", \"Keep\"])\n","plot[0].set_color('tab:green')\n","plot[1].set_color('tab:red')"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"KPuEESZDP-C-","colab_type":"text"},"source":["# Mission 2\n","\n","To make sure you understood the code, in a new cell, change the code of mission 1 to add a third between the 2 batons. The latter will be called **\"Alternating \"**. This will be the case where the player alternates **randomly** between \"change\" and \"keep\".\n"]},{"cell_type":"code","metadata":{"id":"3R82gwZxP9oo","colab_type":"code","outputId":"c029a9a7-bc46-4ecb-c72b-5ae223d109c2","executionInfo":{"status":"ok","timestamp":1585757084720,"user_tz":-120,"elapsed":2253,"user":{"displayName":"Sébastien Vanstavel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5NfGIDvXc-vdIHXhbJ3ezTYoxOfaUGnMRSECx5w=s64","userId":"10084807894626874113"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["import matplotlib.pyplot as plt\n","\n","from random import randint, choice\n","\n","\n","\n","CHANGE = \"change\"\n","KEEP = \"keep\"\n","ALTERNATING = \"alternating\"\n","\n","def playOneGame (strategy):\n","  \"\"\"\n","  Cette première fonction permet de définir ce qui se produit en fonction de \n","  la stratégie choisie par la joueur (changement de porte au second tour ou \n","  conservation de la porte choisie au départ)\n","  La fonction renvoie 1 si le joueur fini avec la bonne porte, sinon 0. \n","  \"\"\"\n","  doors = [0, 1, 2]                       # liste des portes disponibles en début de partie\n","    \n","  good_door = randint(0,2)                # sélection de la porte gagnante parmis les trois\n","    \n","  first_choice = randint(0,2)             # choix aléatoire d'une porte parmis les 3 (représente le choix du joueur)\n","    \n","  doors.remove(first_choice)              # on retire le choix du joueur des porte que l'on peut ouvrir\n","  if first_choice == good_door:\n","    doors.remove(doors [randint(0,1)])    # si porte choisie est la bonne, on ouvre une porte aléatoirement parmis les 2 qui reste\n","  else:\n","    doors = [good_door]                   # sinon on ouvre celle qui n'est pas la bonne\n","  \n","  second_choice = 0\n","                                          # choix du joueur: change de porte ou garde la même?\n","  if strategy.lower() == \"change\":\n","    second_choice = doors[0]              # change de porte pour prendre celle qu'il reste\n","  elif strategy.lower() == \"keep\":\n","    second_choice = first_choice          # garde la même porte\n","  elif strategy.lower() == \"alternating\":\n","    second_choice = choice([doors[0], first_choice])\n","                                          # on alterne entre garder et changer\n","  else:                                   # sinon, affiche une erreur si tout autre choix\n","    raise ValueError(\"Strategy not recognized!\")\n","  \n","  return second_choice == good_door       # on renvoi Treu si le joueur à la bonne porte False sinon\n","\n","\n","def playManyGames(strategy, nb_turns):\n","  \"\"\"\n","  Cette fonction permet de définir une stratégie à adopter (change or keep) \n","  et de jouer au jeu le nombre de fois désirée (nb_turns).\n","  \n","  La fonction retourne 1 si la partie est gagnée (on a la bonne porte à la fin)\n","  et 0 si on a perdu.\n","  \"\"\"\n","  return [1 if playOneGame(strategy) else 0 for i in range(nb_turns)]\n","\n","\n","\"\"\"\"\"\n","Dessine le graphique représentant le nombre de gains sur 10k essais avec les \n","différentes statégies (change, alternating ou keep)\n","\"\"\"\n","plot = plt.bar([1, 3, 2], [sum(playManyGames(\"change\", 10000)), sum(playManyGames(\"keep\", 10000)), sum(playManyGames(\"alternating\", 10000))],\n","               width = .5, tick_label=[\"Change\", \"Keep\", \"Alternating\"])\n","plot[0].set_color('tab:green')\n","plot[2].set_color('tab:orange')\n","plot[1].set_color('tab:red')"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"VPjKxsbQQbbx","colab_type":"text"},"source":["# Mission 3\n","\n","Now, I need you to re-code the Monty Hall game using Numpy. **You must not use Python lists, the random method of Python, nor loop for or while in the code**. Numpy contains mechanisms to achieve the same result.\n","\n","Finally, assemble the 2 functions, play OnePart() and play MultipleParts() into one. In other words, **your Numpy program will contain only one function**. Obviously, **the visual should be the same as mission 2**."]},{"cell_type":"code","metadata":{"id":"IwRDK_YtQbre","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","def playMontyHall(strategy, turns):\n","  # premiers choix (joueur et porte gagnante)\n","  games = np.array([np.random.randint(0, 3, turns), \n","                    np.random.randint(0, 3, turns), \n","                    np.zeros(turns)])\n","  \n","  # second choix\n","  if strategy.lower() == \"change\":\n","    games[2] = (games[0] != games[1])\n","  elif strategy.lower() == \"keep\":\n","    games[2] = (games[0] == games[1])\n","  elif strategy.lower() == \"alternating\":\n","    alt = games[0].size // 2\n","    # 50% des cas on garde\n","    keep = np.array([games[0][:alt], games[1][:alt], games[2][:alt]])\n","    keep[2] = (keep[0] == keep[1])\n","    # 50% des cas on change\n","    change = np.array([games[0][alt:], games[1][alt:], games[2][alt:]])\n","    change[2] = (change[0] != change[1])\n","\n","    games = np.concatenate((keep, change), axis = 1)\n","    \n","  else:\n","    raise ValueError(\"Strategy not recognized!\")\n","\n","  return games[2]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mgWeXSjBxdN1","colab_type":"code","outputId":"f3da6291-f3d5-4dbc-b71e-00c6dfcf0304","executionInfo":{"status":"ok","timestamp":1585757085612,"user_tz":-120,"elapsed":3081,"user":{"displayName":"Sébastien Vanstavel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5NfGIDvXc-vdIHXhbJ3ezTYoxOfaUGnMRSECx5w=s64","userId":"10084807894626874113"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["\"\"\"\"\"\n","Dessine le graphique représentant le nombre de gains sur 10k essais avec les \n","différentes statégies (change, alternating ou keep)\n","\"\"\"\n","plot = plt.bar([1, 3, 2], [sum(playMontyHall(\"change\", 1000000)), sum(playMontyHall(\"keep\", 1000000)), sum(playMontyHall(\"alternating\", 1000000))],\n","               width = .5, tick_label=[\"Change\", \"Keep\", \"Alternating\"])\n","plot[0].set_color('tab:green')\n","plot[2].set_color('tab:orange')\n","plot[1].set_color('tab:red')"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nAgpGU6v6bIdNAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}